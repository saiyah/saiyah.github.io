<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SPI机制 解析-（1）Java SPI使用</title>
      <link href="/2020/03/22/SPI%E6%9C%BA%E5%88%B6%20%E8%A7%A3%E6%9E%90-%EF%BC%881%EF%BC%89Java%20SPI%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/22/SPI%E6%9C%BA%E5%88%B6%20%E8%A7%A3%E6%9E%90-%EF%BC%881%EF%BC%89Java%20SPI%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="SPI机制-解析-（1）Java-SPI使用"><a href="#SPI机制-解析-（1）Java-SPI使用" class="headerlink" title="SPI机制 解析-（1）Java SPI使用"></a>SPI机制 解析-（1）Java SPI使用</h2><h3 id="什么是-Java-SPI"><a href="#什么是-Java-SPI" class="headerlink" title="什么是 Java SPI"></a>什么是 Java SPI</h3><p>​    SPI 全称（Service Provider Interface），JDK 提供的内置服务运行时发现机制，可以通过修改配置文件替换对应接口的具体实现。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><h4 id="1、使用非SPI"><a href="#1、使用非SPI" class="headerlink" title="1、使用非SPI"></a>1、使用非SPI</h4><p>​    以去旅行为例，我们可以选择不同的交通工具出发去旅行，需要进行硬编码获取对应的车辆，我们提供两种选择，Bus And Car 项目结构和代码如下：</p><p>![image-20200322212350902](/Users/mac/Library/Application Support/typora-user-images/image-20200322212350902.png)</p><p>​                                                                        图1.1 项目结构图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 车辆选择接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">selectVehicle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Bus</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">implements</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectVehicle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"选择bus"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Car</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Vehicle</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectVehicle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"选汽车"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 非Spi </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">javaNoSpi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"i want go to beijing"</span>);</span><br><span class="line">     Bus bus = <span class="keyword">new</span> Bus();</span><br><span class="line">     System.out.println(<span class="string">"i go to beijing use"</span> + bus.selectVehicle());</span><br><span class="line">     Car car = <span class="keyword">new</span> Car();</span><br><span class="line">     System.out.println(<span class="string">"i go to beijing use"</span> + car.selectVehicle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、使用SPI"><a href="#2、使用SPI" class="headerlink" title="2、使用SPI"></a>2、使用SPI</h4><p>​    需要在 Resouce 目录下 创建 META-INF/services 然后创建已接口名的文件 ，如图所示：</p><p>![image-20200322211931720](/Users/mac/Library/Application Support/typora-user-images/image-20200322211931720.png) </p><p>SPI 测试类如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void javaSpi() &#123;</span><br><span class="line">      ServiceLoader&lt;Vehicle&gt; serviceLoader = ServiceLoader.load(Vehicle.class);</span><br><span class="line">      serviceLoader.forEach(var -&gt; &#123;</span><br><span class="line">         System.out.println(&quot;i go to beijing use&quot; + var.selectVehicle());</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过替换依赖即可获取对应的实现：</p><p>![image-20200322212901789](/Users/mac/Library/Application Support/typora-user-images/image-20200322212901789.png)</p><p>​    代码 github 地址：xxx</p><h4 id="3、具体例子"><a href="#3、具体例子" class="headerlink" title="3、具体例子"></a>3、具体例子</h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    Java SPI 是面向接口编程的良好实践，使得具体的实现与调用解耦，通过修改配置文件即可完成替换，无需修改业务流程代码</p><p>​    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>testbolg</title>
      <link href="/2019/10/17/testbolg/"/>
      <url>/2019/10/17/testbolg/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> hexo第一次 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
