<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SPI机制 解析-（1）Java SPI使用</title>
      <link href="/2020/03/22/SPI%E6%9C%BA%E5%88%B6%20%E8%A7%A3%E6%9E%90-%EF%BC%881%EF%BC%89Java%20SPI%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/22/SPI%E6%9C%BA%E5%88%B6%20%E8%A7%A3%E6%9E%90-%EF%BC%881%EF%BC%89Java%20SPI%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1、什么是-Java-SPI"><a href="#1、什么是-Java-SPI" class="headerlink" title="1、什么是 Java SPI"></a>1、什么是 Java SPI</h2><p>​    SPI 全称（Service Provider Interface），JDK 提供的内置服务运行时发现机制，可以通过修改配置文件替换对应接口的具体实现。</p><h2 id="2、如何使用"><a href="#2、如何使用" class="headerlink" title="2、如何使用"></a>2、如何使用</h2><h3 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h3><p>​    比如网站需要登录，有多种不同的登录方式（微信、QQ、邮箱），Action 都是登录，抽象好接口后，只需要实现不同的登录方式即可，通过 SPI 动态加载，后面就算新增方式，也无需修改业务流程代码，对扩展开放。</p><h3 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h3><p>​    下面以去旅行为例，我们可以选择不同的交通工具出发去旅行。项目目录结构如下：</p><p>​    需要进行硬编码获取对应的车辆，我们提供两种选择，Bus And Car 项目结构和代码如下：</p><p><img src="http://q7lqly6au.bkt.clouddn.com/2020-03-23-010225.jpg" alt="项目结构图"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 车辆选择接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">selectVehicle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Bus</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">implements</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectVehicle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"选择bus"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Car</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Vehicle</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectVehicle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"选汽车"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用非SPI"><a href="#使用非SPI" class="headerlink" title="使用非SPI"></a>使用非SPI</h4><p>​    需要硬编码，每次新增交通工具需要修改业务流程代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非Spi </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">javaNoSpi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"i want go to beijing"</span>);</span><br><span class="line">     Bus bus = <span class="keyword">new</span> Bus();</span><br><span class="line">     System.out.println(<span class="string">"i go to beijing use"</span> + bus.selectVehicle());</span><br><span class="line">     Car car = <span class="keyword">new</span> Car();</span><br><span class="line">     System.out.println(<span class="string">"i go to beijing use"</span> + car.selectVehicle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用SPI"><a href="#使用SPI" class="headerlink" title="使用SPI"></a>使用SPI</h4><p>​    具体实现需要在 Resouce 目录下 创建 META-INF/services 然后创建已接口名的文件 ，如图所示：</p><p><img src="http://q7lqly6au.bkt.clouddn.com/2020-03-22-165825.jpg" alt="SPI 扩展图"> </p><p>SPI 测试类如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public <span class="keyword">void</span> javaSpi() &#123;</span><br><span class="line">      ServiceLoader&lt;Vehicle&gt; serviceLoader = ServiceLoader.load(Vehicle.class);</span><br><span class="line">      serviceLoader.forEach(<span class="keyword">var</span> -&gt; &#123;</span><br><span class="line">         System.out.println(<span class="string">"i go to beijing use"</span> + <span class="keyword">var</span>.selectVehicle());</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过替换依赖即可新增或减少对应的实现，无需修改业务流程代码：</p><p><img src="http://q7lqly6au.bkt.clouddn.com/2020-03-22-165826.jpg" alt="项目依赖图"></p><h2 id="3、已有使用实践"><a href="#3、已有使用实践" class="headerlink" title="3、已有使用实践"></a>3、已有使用实践</h2><p>​    JDBC、日志 Slfj 等</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>​    Java SPI 是面向接口编程的良好实践，使得具体的实现与调用解耦，通过修改配置文件即可完成替换，无需修改业务流程代码，下篇文章分析 SPI 源码</p><p>​    </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
