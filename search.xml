<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>23种设计模式-备忘录模式</title>
      <link href="/2020/05/27/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/27/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="23种设计模式-备忘录模式"><a href="#23种设计模式-备忘录模式" class="headerlink" title="23种设计模式-备忘录模式"></a>23种设计模式-备忘录模式</h2><h3 id="要达到的效果："><a href="#要达到的效果：" class="headerlink" title="要达到的效果："></a>要达到的效果：</h3><p>​        在不暴露对象实现细节的情况下，保存和恢复对象之前的状态</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>​        想要备份对象的快照记录，要么从外部遍历对象获取数据快照</p><p>​        要么对象自己生成快照，备忘录模式就是自己生成快照</p><h3 id="UML："><a href="#UML：" class="headerlink" title="UML："></a>UML：</h3><p><img src="http://cdn.saiyah.cn/2020-05-26-165447.png" alt="Memento"></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 状态</span></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Memento memento = <span class="keyword">new</span> Memento();</span><br><span class="line">        memento.setState(state);</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        state = memento.getState();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Memento&gt; mementos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Memento&gt; <span class="title">getMementos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mementos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        mementos.add(memento);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CareTaker careTaker = <span class="keyword">new</span> CareTaker();</span><br><span class="line">        Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line">        originator.setState(<span class="string">"副本1"</span>);</span><br><span class="line">       careTaker.addMemento(originator.createMemento());</span><br><span class="line">        originator.setState(<span class="string">"副本2"</span>);</span><br><span class="line">       careTaker.addMemento(originator.createMemento());</span><br><span class="line">        careTaker.getMementos().forEach(<span class="keyword">var</span>-&gt; System.out.println(<span class="keyword">var</span>.getState()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>​        棋牌游戏悔棋、文本编辑回滚等</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SPI机制01-Java SPI</title>
      <link href="/2020/05/27/SPI%E6%9C%BA%E5%88%B601-Java%20SPI/"/>
      <url>/2020/05/27/SPI%E6%9C%BA%E5%88%B601-Java%20SPI/</url>
      
        <content type="html"><![CDATA[<h2 id="1、什么是-Java-SPI"><a href="#1、什么是-Java-SPI" class="headerlink" title="1、什么是 Java SPI"></a>1、什么是 Java SPI</h2><p> SPI 全称（Service Provider Interface），JDK 提供的内置服务运行时发现机制，可以通过修改配置文件替换对应接口的具体实现。</p><h2 id="2、如何使用"><a href="#2、如何使用" class="headerlink" title="2、如何使用"></a>2、如何使用</h2><h3 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h3><p> 比如网站需要登录，有多种不同的登录方式（微信、QQ、邮箱），Action 都是登录，抽象好接口后，只需要实现不同的登录方式即可，通过 SPI 动态加载，后面就算新增方式，也无需修改业务流程代码，对扩展开放。</p><h3 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h3><p> 下面以去旅行为例，我们可以选择不同的交通工具出发去旅行。项目目录结构如下：</p><p> 需要进行硬编码获取对应的车辆，我们提供两种选择，Bus And Car 项目结构和代码如下：</p><p><a href="http://q7lqly6au.bkt.clouddn.com/2020-03-23-010225.jpg" target="_blank" rel="noopener"><img src="http://q7lqly6au.bkt.clouddn.com/2020-03-23-010225.jpg" alt="项目结构图"></a></p><p><a href="http://q7lqly6au.bkt.clouddn.com/2020-03-23-010225.jpg" target="_blank" rel="noopener">项目结构图</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 车辆选择接口</span><br><span class="line">public interface Vehicle &#123;</span><br><span class="line">    String selectVehicle();</span><br><span class="line">&#125;</span><br><span class="line">// Bus</span><br><span class="line">public class Bus implements Vehicle &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String selectVehicle() &#123;</span><br><span class="line">        System.out.println(&quot;选择bus&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// Car</span><br><span class="line">public class Car implements Vehicle&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String selectVehicle() &#123;</span><br><span class="line">        System.out.println(&quot;选汽车&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用非SPI"><a href="#使用非SPI" class="headerlink" title="使用非SPI"></a>使用非SPI</h4><p> 需要硬编码，每次新增交通工具需要修改业务流程代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 非Spi </span><br><span class="line">@Test</span><br><span class="line">public void javaNoSpi() &#123;</span><br><span class="line">     System.out.println(&quot;i want go to beijing&quot;);</span><br><span class="line">     Bus bus = new Bus();</span><br><span class="line">     System.out.println(&quot;i go to beijing use&quot; + bus.selectVehicle());</span><br><span class="line">     Car car = new Car();</span><br><span class="line">     System.out.println(&quot;i go to beijing use&quot; + car.selectVehicle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用SPI"><a href="#使用SPI" class="headerlink" title="使用SPI"></a>使用SPI</h4><p> 具体实现需要在 Resouce 目录下 创建 META-INF/services 然后创建已接口名的文件 ，如图所示：</p><p><a href="http://q7lqly6au.bkt.clouddn.com/2020-03-22-165825.jpg" target="_blank" rel="noopener"><img src="http://q7lqly6au.bkt.clouddn.com/2020-03-22-165825.jpg" alt="SPI 扩展图"></a></p><p><a href="http://q7lqly6au.bkt.clouddn.com/2020-03-22-165825.jpg" target="_blank" rel="noopener">SPI 扩展图</a></p><p>SPI 测试类如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void javaSpi() &#123;</span><br><span class="line">      ServiceLoader&lt;Vehicle&gt; serviceLoader = ServiceLoader.load(Vehicle.class);</span><br><span class="line">      serviceLoader.forEach(var -&gt; &#123;</span><br><span class="line">         System.out.println(&quot;i go to beijing use&quot; + var.selectVehicle());</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过替换依赖即可新增或减少对应的实现，无需修改业务流程代码：</p><p><a href="http://q7lqly6au.bkt.clouddn.com/2020-03-22-165826.jpg" target="_blank" rel="noopener"><img src="http://q7lqly6au.bkt.clouddn.com/2020-03-22-165826.jpg" alt="项目依赖图"></a></p><p><a href="http://q7lqly6au.bkt.clouddn.com/2020-03-22-165826.jpg" target="_blank" rel="noopener">项目依赖图</a></p><h2 id="3、已有使用实践"><a href="#3、已有使用实践" class="headerlink" title="3、已有使用实践"></a>3、已有使用实践</h2><p> JDBC、日志 Slfj 等</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p> Java SPI 是面向接口编程的良好实践，使得具体的实现与调用解耦，通过修改配置文件即可完成替换，无需修改业务流程代码，下篇文章分析 SPI 源码</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
